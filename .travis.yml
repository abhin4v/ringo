# Use new container infrastructure to enable caching
sudo: false

# Choose a lightweight base image; we provide our own build tools.
language: c

# The different configurations we want to test. You could also do things like
# change flags or use --stack-yaml to point to a different file.
env:
- ARGS="--resolver lts-2"
- ARGS="--resolver lts-3"
- ARGS="--resolver lts-4"
- ARGS="--resolver lts-5"
- ARGS="--resolver lts-6"
- ARGS="--resolver lts-7"
- ARGS="--resolver lts-8"
- ARGS="--resolver lts-9"
- ARGS="--resolver lts"
- ARGS="--resolver nightly"

before_install:
# Download and unpack the stack executable
- mkdir -p ~/.local/bin
- export PATH=$HOME/.local/bin:$PATH
- travis_retry curl -L https://www.stackage.org/stack/linux-x86_64 | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'
- stack $ARGS --no-terminal --install-ghc install cabal-install happy
- cabal update

# This line does all of the work: installs GHC if necessary, build the library,
# executables, and test suites, and runs the test suites. --no-terminal works
# around some quirks in Travis's terminal implementation.
script:
- export PATH=$(stack $ARGS path | grep compiler-bin | awk '{print $2}'):$PATH
- export DIST_DIR=$(stack $ARGS path | grep dist-dir | awk '{print $2}')
- export ARCH=$(echo $DIST_DIR | cut -d '/' -f 3)
- export GHC_VER=$(ghc --version | awk '{print $8}')
- stack $ARGS --no-terminal install --test --fast
- stack $ARGS sdist ringo-core && cd ringo-core && ../test_sdist
- cd $TRAVIS_BUILD_DIR
- stack $ARGS sdist ringo && cd ringo && ../test_sdist

before_cache:
- cd $TRAVIS_BUILD_DIR
- rm -rf .stack-work/logs;
- rm -rf $HOME/.cabal/logs;
- rm -rf $HOME/.cabal/lib/$ARCH-ghc-$GHC_VER/ringo*

# Caching so the next build will be fast too.
cache:
  directories:
  - $HOME/.stack
  - $HOME/.cabal
  - $HOME/.ghc
  - .stack-work
  - ringo/.stack-work
  - ringo-core/.stack-work
